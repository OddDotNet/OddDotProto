syntax = "proto3";

package odddotnet.proto.common.v1;

option csharp_namespace = "OddDotNet.Proto.Common.V1";
option java_multiple_files = true;
option java_package = "io.odddotnet.proto.common.v1";
option java_outer_classname = "CommonProto";
option go_package = "go.odddotnet.io/proto/otlp/common/v1";

message StringProperty {
  StringCompareAsType compare_as = 1;
  optional string compare = 2;
}
  
message ByteStringProperty {
  ByteStringCompareAsType compare_as = 1;
  optional bytes compare = 2;
}
  
message BoolProperty {
  BoolCompareAsType compare_as = 1;
  optional bool compare = 2;
}
  
message UInt64Property {
  NumberCompareAsType compare_as = 1;
  optional fixed64 compare = 2;
}
  
message UInt32Property {
  NumberCompareAsType compare_as = 1;
  optional uint32 compare = 2;
}
  
message Int64Property {
  NumberCompareAsType compare_as = 1;
  optional int64 compare = 2;
}
  
message Int32Property {
  NumberCompareAsType compare_as = 1;
  optional int32 compare = 2;
}
  
message DoubleProperty {
  NumberCompareAsType compare_as = 1;
  optional double compare = 2;
}
  
message KeyValueProperty {
  string key = 1;
  AnyValueProperty value = 2;
}
  
message AnyValueProperty {
  oneof value {
    StringProperty string_value = 1;
    BoolProperty bool_value = 2;
    Int64Property int_value = 3;
    DoubleProperty double_value = 4;
    ArrayValueProperty array_value = 5;
    KeyValueListProperty kvlist_value = 6;
    ByteStringProperty byte_string_value = 7;
  }
}

message ArrayValueProperty {
  repeated AnyValueProperty values = 1;
}

message KeyValueListProperty {
  repeated KeyValueProperty values = 1;
}
  
enum NumberCompareAsType {
  NUMBER_COMPARE_AS_TYPE_NONE_UNSPECIFIED = 0;
  NUMBER_COMPARE_AS_TYPE_EQUALS = 1;
  NUMBER_COMPARE_AS_TYPE_NOT_EQUALS = 2;
  NUMBER_COMPARE_AS_TYPE_GREATER_THAN = 3;
  NUMBER_COMPARE_AS_TYPE_GREATER_THAN_EQUALS = 4;
  NUMBER_COMPARE_AS_TYPE_LESS_THAN = 5;
  NUMBER_COMPARE_AS_TYPE_LESS_THAN_EQUALS = 6;
}
  
enum EnumCompareAsType {
  ENUM_COMPARE_AS_TYPE_NONE_UNSPECIFIED = 0;
  ENUM_COMPARE_AS_TYPE_EQUALS = 1;
  ENUM_COMPARE_AS_TYPE_NOT_EQUALS = 2;
}
  
enum BoolCompareAsType {
  BOOL_COMPARE_AS_TYPE_NONE_UNSPECIFIED = 0;
  BOOL_COMPARE_AS_TYPE_EQUALS = 1;
  BOOL_COMPARE_AS_TYPE_NOT_EQUALS = 2;
}
  
enum ByteStringCompareAsType {
  BYTE_STRING_COMPARE_AS_TYPE_NONE_UNSPECIFIED = 0;
  BYTE_STRING_COMPARE_AS_TYPE_EQUALS = 1;
  BYTE_STRING_COMPARE_AS_TYPE_NOT_EQUALS = 2;
  BYTE_STRING_COMPARE_AS_TYPE_EMPTY = 3;
  BYTE_STRING_COMPARE_AS_TYPE_NOT_EMPTY = 4;
}
  
enum StringCompareAsType {
  STRING_COMPARE_AS_TYPE_NONE_UNSPECIFIED = 0;
  STRING_COMPARE_AS_TYPE_EQUALS = 1;
  STRING_COMPARE_AS_TYPE_NOT_EQUALS = 2;
  STRING_COMPARE_AS_TYPE_CONTAINS = 3;
  STRING_COMPARE_AS_TYPE_NOT_CONTAINS = 4;
  STRING_COMPARE_AS_TYPE_IS_EMPTY = 5;
  STRING_COMPARE_AS_TYPE_IS_NOT_EMPTY = 6;
}